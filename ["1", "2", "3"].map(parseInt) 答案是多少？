<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>["1", "2", "3"].map(parseInt) 答案是多少？</title>
</head>
<body>
    <!--首先理解parseInt(str,radix)-->
<!--注意：其中 radix 表示要解析的数字的“基数”。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回数字结果值】;
    如果radix为0或者省略了，parseInt默认为十进制；如：parseInt("12",10) ;parseInt("12") ;parseInt("12",0) ;结果都是12
    parseInt("num",1)这种情况都会返回NaN
    parseInt("3",2)这种情况是因为2进制里面只有0,1；没有3，所以也会返回NaN
-->
    <!--这是重写的parseInt函数-->
    <script>
        function parseInt(str, radix) {
            return str+'-'+radix;
        }
        var a=["1", "2", "3"];
        a.map(parseInt);  // ["1-0", "2-1", "3-2"] 不能大于radix

    </script>
<!--测试下面的例子-->
    <script>
        ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16"].map(parseInt);
//        结果：[1, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 9, 11, 13, 15, 17, 19, 21]
        parseInt("1", 0); // 十进制 1
        parseInt("2", 1); // 第二个参数不在 2-36 NaN
        parseInt("3", 2); // 3不属于二进制里面 NaN
        parseInt("4", 3); // 同理 NaN
        parseInt("5", 4); // 同理 NaN
        parseInt("6", 5);  // 同理 NaN
        parseInt("7", 6);// 同理 NaN
        parseInt("8", 7);// 同理 NaN
        parseInt("9", 8);// 同理 NaN
        parseInt("10", 9); // 九进制 （1*9+0 = 9）
        parseInt("11", 10); // 十进制 （1*10+1 = 11）
        parseInt("12", 11);//同理（1*11+2）
        parseInt("13", 12);
        parseInt("14", 13);
        parseInt("15", 14);
        parseInt("16", 15);
//所以["1", "2", "3"].map(parseInt) 答案就是：[1, NaN, NaN]
    </script>

</body>
</html>
